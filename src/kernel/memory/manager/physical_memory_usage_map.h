#ifndef PHYSICAL_MEMORY_USAGE_MAP
#define PHYSICAL_MEMORY_USAGE_MAP

#include <stdint.h>

#define PHYSICAL_MEMORY_USAGE_PAGE_TYPE_PHYSICAL_USAGE_MAP 0x0F
#define PHYSICAL_MEMORY_USAGE_PAGE_TYPE_PHYSICAL_USAGE_PAGE 0x0E
#define PHYSICAL_MEMORY_USAGE_PAGE_TYPE_USER_ALLOCATED 0x03
#define PHYSICAL_MEMORY_USAGE_PAGE_TYPE_KERNEL_ALLOCATED 0x02
#define PHYSICAL_MEMORY_USAGE_PAGE_TYPE_HARDWARE_RESERVED 0x01
#define PHYSICAL_MEMORY_USAGE_PAGE_TYPE_UNALLOCATED 0x00
#define PHYSICAL_MEMORY_USAGE_PAGE_TYPE(t) (t&0x0F)
#define PHYSICAL_MEMORY_USAGE_PAGE(t) PHYSICAL_MEMORY_USAGE_PAGE_TYPE(t)

#define PHYSICAL_MEMORY_USAGE_MAP_ADDRESS(a) (((uint32_t)(a))&0xFFFFF000)
#define PHYSICAL_MEMORY_USAGE_MAP_SIZE_4KB 0x00
#define PHYSICAL_MEMORY_USAGE_MAP_SIZE_4MB 0x80
#define PHYSICAL_MEMORY_USAGE_MAP_4MB_PAGE_ATTRIBUTES_MASK 0x7F
#define PHYSICAL_MEMORY_USAGE_MAP(addr,s) \
        (PHYSICAL_MEMORY_USAGE_MAP_ADDRESS(addr) |\
        ((s)?PHYSICAL_MEMORY_USAGE_MAP_SIZE_4MB:PHYSICAL_MEMORY_USAGE_MAP_SIZE_4KB))

typedef uint64_t PHYSICAL_MEMORY_USAGE_PAGE_ENTRY;
typedef uint32_t PHYSICAL_MEMORY_USAGE_MAP_ENTRY;

typedef struct __attribute__((aligned(0x1000))) {
    PHYSICAL_MEMORY_USAGE_PAGE_ENTRY entries[512];
} PHYSICAL_MEMORY_USAGE_PAGE;

typedef struct __attribute__((aligned(0x1000))) {
    PHYSICAL_MEMORY_USAGE_MAP_ENTRY pages[1024];
} PHYSICAL_MEMORY_USAGE_MAP;

#endif // PHYSICAL_MEMORY_USAGE_MAP
