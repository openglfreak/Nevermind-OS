find_file_in_inode:
call get_block2device_shift
mov ch,0x0C
add edi,0x28
mov bx,((usable_start>>0x04)+0x40)
mov es,bx
mov bx,(usable_start&0x0F)
find_file_in_inode_direct_loop:
mov dword eax,[edi]
shl eax,cl
pusha
mov ch,0x01
shl ch,cl
mov cl,ch
call read_sectors_lba
popa
call find_file_in_directory_entries
test eax,eax
jnz return
add edi,0x04
dec ch
jnz find_file_in_inode_direct_loop
find_file_in_inode_indirect_loop:
mov dword eax,[edi]
shl eax,cl
pusha
mov ch,0x01
shl ch,cl
mov cl,ch
call read_sectors_lba
popa
call find_file_in_indirect_directory_entries
find_file_in_inode_indirect2_loop:
find_file_in_inode_indirect3_loop:
xor eax,eax
ret

find_file_in_directory_entries:
;es:bx=directory entry table start
;esi=file name start
xor eax,eax
push eax
mov ebp,esp
pusha
call get_block_size
mov edx,eax
find_file_in_directory_entries_loop:
xor ecx,ecx
mov byte cl,[es:(bx+0x06)]
add bx,0x08
add bx,cx
mov edi,esi
add edi,ecx
check_name:
dec bx
dec edi
mov al,[es:bx]
cmp al,[edi]
jnz find_file_in_directory_entries_next_entry
loop check_name
return_inode:
mov word eax,[es:(bx-0x08)]
mov dword [ebp],eax
popa
pop eax
ret
find_file_in_directory_entries_next_entry:
add cl,0x07
sub bx,cx
xor eax,eax
mov word ax,[es:(bx+0x04)]
add bx,ax
sub edx,eax
jnz find_file_in_directory_entries_loop
popa
pop eax
ret

find_file_in_indirect_directory_entries:
xor eax,eax
push eax
pusha
xor ecx,ecx
mov cl,[superblock_start+0x18]
inc cl
mov edx,0x80
shl edx,cl
find_file_in_indirect_directory_entries_loop:
mov eax,[es:bx]
pusha
mov bx,((usable_start>>0x04)+0x80)
mov es,bx
mov bx,(usable_start&0x0F)
pusha
mov ch,0x01
shl ch,cl
mov cl,ch
call read_sectors_lba
popa
call find_file_in_directory_entries
popa
add bx,0x04
dec edx
jnz find_file_in_indirect_directory_entries_loop
popa
ret 0x04
